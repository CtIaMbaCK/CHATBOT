"""Add user_id to ChatHistory

Revision ID: 1db4642bf32b
Revises: 
Create Date: 2025-06-30 17:45:37.739188

"""
from typing import Sequence, Union

from alembic import op
import pgvector
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1db4642bf32b'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('chat_history', 'username',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('chat_history', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.create_index(op.f('ix_chat_history_user_id'), 'chat_history', ['user_id'], unique=False)
    op.create_index(op.f('ix_chat_history_username'), 'chat_history', ['username'], unique=False)
    op.drop_constraint(op.f('chat_history_user_id_fkey'), 'chat_history', type_='foreignkey')
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'hashed_password',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('users', 'full_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('users', 'role',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'student'::text"))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.drop_column('users', 'is_active')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'role',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'student'::text"))
    op.alter_column('users', 'full_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('users', 'hashed_password',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.create_foreign_key(op.f('chat_history_user_id_fkey'), 'chat_history', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_chat_history_username'), table_name='chat_history')
    op.drop_index(op.f('ix_chat_history_user_id'), table_name='chat_history')
    op.alter_column('chat_history', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('chat_history', 'username',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.create_table('embedding_pdfs_20250627',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1024), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('field', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('title_raw', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ma_nganh', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('doi_tuong', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('filename', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('file_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('page_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('chunk_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('embedding_pdfs_20250627_pkey'))
    )
    op.create_table('embedding_admission_20250627',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1024), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('field', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('title_raw', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ma_nganh', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('doi_tuong', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('chunk_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('embedding_admissions_20250627_pkey'))
    )
    op.create_table('embedding_student_20250627',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1024), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('field', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('title_raw', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ma_nganh', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('doi_tuong', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('chunk_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('embedding_students_20250627_pkey'))
    )
    op.create_table('embedding_admissions_20250627',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1024), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('field', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('title_raw', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ma_nganh', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('doi_tuong', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('chunk_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('embedding_admissions_20250627_pkey'))
    )
    op.create_table('embedding_pdfs_20250627',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1024), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('field', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('title_raw', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ma_nganh', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('doi_tuong', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('filename', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('file_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('page_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('chunk_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('embedding_pdfs_20250627_pkey'))
    )
    op.create_table('embedding_students_20250627',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('title', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=1024), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('field', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('title_raw', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('ma_nganh', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('doi_tuong', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('chunk_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('embedding_students_20250627_pkey'))
    )
    # ### end Alembic commands ###
