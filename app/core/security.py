from fastapi import Depends, Header, HTTPException, status
from jose import JWTError, jwt
from passlib.context import CryptContext
from typing import Optional
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from app.config import settings
from app.core.constants import Role
from app.db.models.user_model import User
from app.db.database import get_db  # b·∫°n c·∫ßn import get_db ƒë·ªÉ truy v·∫•n DB

# M·∫≠t kh·∫©u v√† Token
# pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
SECRET_KEY = settings.JWT_SECRET_KEY
ALGORITHM = settings.JWT_ALGORITHM

# Tr·∫£ l·∫°i m·∫≠t kh·∫©u th√¥ (plaintext)
def password(password: str) -> str:
    return password  # kh√¥ng m√£ h√≥a g√¨ c·∫£

# So s√°nh tr·ª±c ti·∫øp m·∫≠t kh·∫©u ng∆∞·ªùi d√πng nh·∫≠p v·ªõi m·∫≠t kh·∫©u l∆∞u trong DB
def verify_password(plain_password: str, stored_password: str) -> bool:
    return plain_password == stored_password

# Gi·∫£i m√£ token
def decode_access_token(token: str) -> dict:
    try:
        return jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
    except JWTError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Token kh√¥ng h·ª£p l·ªá",
        )

async def get_current_user(
    authorization: Optional[str] = Header(None),
    db: AsyncSession = Depends(get_db)
) -> User:
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng Authorization header",
        )

    token = authorization.split(" ")[1]
    payload = decode_access_token(token)

    user_id = payload.get("user_id")
    if not user_id:
        raise HTTPException(status_code=401, detail="Token thi·∫øu th√¥ng tin")

    # üîç Truy v·∫•n ng∆∞·ªùi d√πng t·ª´ DB
    result = await db.execute(select(User).where(User.id == user_id))
    user = result.scalar_one_or_none()

    if not user:
        raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng")

    return user  

# Ki·ªÉm tra quy·ªÅn ng∆∞·ªùi d√πng
def require_role(allowed_roles: list[Role]):
    """
    Dependency ki·ªÉm tra xem ng∆∞·ªùi d√πng hi·ªán t·∫°i c√≥ n·∫±m trong danh s√°ch quy·ªÅn kh√¥ng.
    """
    async def checker(current_user: User = Depends(get_current_user)):
        if current_user.role not in allowed_roles:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ch·ª©c nƒÉng n√†y."
            )
        return current_user

    return checker
