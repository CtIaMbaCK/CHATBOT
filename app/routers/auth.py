from fastapi import APIRouter, HTTPException, Depends, Header, Response, status, Query
from fastapi.responses import JSONResponse
from pydantic import BaseModel, EmailStr
from pytest import Session
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select

from app.db.database import get_db
from app.db.models.user_model import User
from app.db.schemas.user_schema import ChangePasswordSchema, UserCreate, UserLogin, TokenResponse, UserOut
from app.services.auth_service import (
    create_access_token,
    get_current_user,
    verify_password
)
from app.auth.email_utils import generate_random_password
from app.config import settings
from app.core.security import password


from app.auth.email_utils import send_new_password_email
from app.db.models.user_model import User

from fastapi import APIRouter, HTTPException, Depends, status
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.future import select
from app.db.database import get_db

router = APIRouter(tags=["Auth"])


@router.get("/protected")
async def protected_route(current_user: User = Depends(get_current_user)):
    return {
        "user_id": current_user.id,
        "email": current_user.email,
        "role": current_user.role,
        "message": "B·∫°n c√≥ token h·ª£p l·ªá!"
    }

@router.get("/me", response_model=UserOut)
async def get_me(user = Depends(get_current_user)):
    return user

@router.post("/signup", response_model=TokenResponse, status_code=status.HTTP_201_CREATED)
async def signup(user: UserCreate, db: AsyncSession = Depends(get_db)):
    # Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    result = await db.execute(select(User).where(User.email == user.email))
    if result.scalar_one_or_none():
        raise HTTPException(status_code=400, detail="Email ƒë√£ t·ªìn t·∫°i")

    # T·∫°o user m·ªõi v·ªõi m·∫≠t kh·∫©u kh√¥ng m√£ h√≥a
    new_user = User(
        email=user.email,
        password=password(user.password),  # d√πng password() thay v√¨ hash
        full_name=user.full_name,
        role=user.role if hasattr(user, "role") else "student"
    )

    db.add(new_user)
    await db.commit()
    await db.refresh(new_user)

    # T·∫°o JWT token
    token = create_access_token({"user_id": str(new_user.id), "role": new_user.role})
    return TokenResponse(access_token=token, role=new_user.role)

@router.post("/login", response_model=TokenResponse)
async def login(user: UserLogin, db: AsyncSession = Depends(get_db)):
    # T√¨m ng∆∞·ªùi d√πng theo email
    result = await db.execute(select(User).where(User.email == user.email))
    db_user = result.scalar_one_or_none()

    # Ki·ªÉm tra m·∫≠t kh·∫©u th√¥ (plaintext)
    if not db_user or not verify_password(user.password, db_user.password):  # <-- s·ª≠a ·ªü ƒë√¢y
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng"
        )

    # T·∫°o JWT token
    token = create_access_token({
        "user_id": str(db_user.id),
        "role": db_user.role
    })

    return TokenResponse(
        access_token=token,
        role=db_user.role,
        force_password_change=db_user.force_password_change
    )



@router.post("/logout", tags=["Auth"])
async def logout(response: Response):
    """
    ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng. Tr·∫£ v·ªÅ response cho client xo√° token.
    N·∫øu d√πng cookie, c√≥ th·ªÉ xo√° t·∫°i ƒë√¢y lu√¥n.
    """
    res = JSONResponse(content={"message": "ƒêƒÉng xu·∫•t th√†nh c√¥ng!"})

    # N·∫øu b·∫°n l∆∞u token trong cookie:
    res.delete_cookie("access_token")

    return res

class ForgotPasswordRequest(BaseModel):
    email: EmailStr

@router.post("/forgot-password", status_code=status.HTTP_200_OK)
async def forgot_password(
    request: ForgotPasswordRequest,
    db: AsyncSession = Depends(get_db)
):
    # üîç T√¨m user theo email
    result = await db.execute(select(User).where(User.email == request.email))
    user = result.scalar_one_or_none()

    if not user:
        raise HTTPException(status_code=404, detail="Email kh√¥ng t·ªìn t·∫°i")

    # üîê T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n m·ªõi
    new_password = generate_random_password()

    # ‚úÖ G√°n l·∫°i m·∫≠t kh·∫©u m·ªõi (plaintext)
    user.password = password(new_password)  # d√πng h√†m password(), hi·ªán ƒëang tr·∫£ v·ªÅ nguy√™n string

    # ‚úÖ ƒê·∫∑t c·ªù b·∫Øt bu·ªôc ƒë·ªïi m·∫≠t kh·∫©u sau khi ƒëƒÉng nh·∫≠p
    user.force_password_change = True

    # üíæ C·∫≠p nh·∫≠t d·ªØ li·ªáu
    db.add(user)
    await db.commit()
    await db.refresh(user)

    # üìß G·ª≠i email ch·ª©a m·∫≠t kh·∫©u m·ªõi
    send_new_password_email(user.email, new_password)

    return {"message": "üîê M·∫≠t kh·∫©u m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n."}

@router.post("/change-password")
async def change_password(
    data: ChangePasswordSchema,
    user: User = Depends(get_current_user),
    db: AsyncSession = Depends(get_db),
):
    # Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán t·∫°i (so s√°nh plaintext)
    if not verify_password(data.current_password, user.password):  
        raise HTTPException(status_code=400, detail="M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng.")

    # G√°n m·∫≠t kh·∫©u m·ªõi (kh√¥ng hash)
    user.password = password(data.new_password)  # d√πng h√†m password(), hi·ªán ƒëang tr·∫£ l·∫°i nguy√™n chu·ªói

    # T·∫Øt c·ªù b·∫Øt ƒë·ªïi m·∫≠t kh·∫©u
    user.force_password_change = False

    # L∆∞u thay ƒë·ªïi
    db.add(user)
    await db.commit()

    return {"message": "‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng"}
